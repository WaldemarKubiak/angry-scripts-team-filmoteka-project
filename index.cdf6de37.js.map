{"mappings":"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","sources":["src/js/loader.js","src/js/api.js","src/js/local-storage.js","src/js/add-to-watch&queue.js","src/js/movie-modal.js","src/js/renderMovieCollection.js","src/js/main-section-home.js","src/js/searchByKeyword.js"],"sourcesContent":["const loader = document.querySelector('.loader');\n\nloader.classList.add('loader-run');\n\nwindow.addEventListener('load', function () {\n  loader.classList.remove('.loader-run');\n});\n","const API_KEY = '7181a2b710caf29c7153fca4f71ab7d2';\nconst MAIN_URL = 'https://api.themoviedb.org/3';\n\n//---Przykładowe zapytanie do api---///\n//---`${MAIN_URL}/movie/550?api_key=${API_KEY}`;---///\n\n// getTrending(page) - zaczytuje trendujące filmy z ostatniego tygodnia\n//                     (parametr page jest opcjonalny, domyślna wartość = 1);\n// getMovies(query, page) - zaczytuje filmy wg wpisanego stringa przekazanego jako parametr\n//                     (parametr page jest opcjonalny, domyślna wartość = 1);\n// getMovieByID(id) - zaczytuje dane filmu wg id;;\n// getGenres() - zaczytuje tablicę z gatunkami filmów\n//\n// Aby zaimportować API wpisz:\n//\n// import API from './api'\n//\n// Aby wywołąć pojedynczą funkcję wpisz np.:\n//\n// API.getMovies(query)\n\nconst getTrending = async (page = 1) => {\n  try {\n    const TRENDING_URL = `https://api.themoviedb.org/3/trending/movie/week?api_key=${API_KEY}&page=${page}`;\n    const response = await fetch(TRENDING_URL);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nconst getGenres = async () => {\n  try {\n    const GENRES_URL = `https://api.themoviedb.org/3/genre/movie/list?api_key=${API_KEY}&language=en-US`;\n    const response = await fetch(GENRES_URL);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nconst getMovieByID = async id => {\n  try {\n    const GET_MOVIE_BY_ID_URL = `https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}`;\n    const response = await fetch(GET_MOVIE_BY_ID_URL);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nconst getMovies = async (query, page = 1) => {\n  try {\n    const GET_MOVIES_QUERY_URL = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${query}&page=${page}`;\n    const response = await fetch(GET_MOVIES_QUERY_URL);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nconst API = { getTrending, getMovieByID, getMovies, getGenres };\nexport default API;\n","export const KEY_WATCHED = 'watched';\nexport const KEY_QUEUE = 'queue';\nexport const watched = getWatchedLocalStoradge() || [];\nexport const queue = getQueueLocalStoradge() || [];\n\nexport function getWatchedLocalStoradge() {\n  return JSON.parse(localStorage.getItem(KEY_WATCHED));\n}\n\nexport function getQueueLocalStoradge() {\n  return JSON.parse(localStorage.getItem(KEY_QUEUE));\n}\n\nexport function setWatchedLocalStoradge(arr) {\n  localStorage.setItem(KEY_WATCHED, JSON.stringify(arr));\n}\n\nexport function setQueueLocalStoradge(arr) {\n  localStorage.setItem(KEY_QUEUE, JSON.stringify(arr));\n}\n\n// const LS = {\n//   KEY_WATCHED,\n//   KEY_QUEUE,\n//   watched,\n//   queue,\n//   getWatchedLocalStoradge,\n//   setWatchedLocalStoradge,\n//   getQueueLocalStoradge,\n//   setQueueLocalStoradge,\n// };\n\n// export default LS;\n","import { watched, queue, setWatchedLocalStoradge, setQueueLocalStoradge } from './local-storage';\n\nfunction onAddToWatched(id) {\n  if (watched.includes(id)) {\n    return;\n  }\n  watched.push(id);\n  setWatchedLocalStoradge(watched);\n}\n\nfunction onAddToQueue(id) {\n  if (queue.includes(id)) {\n    return;\n  }\n  queue.push(id);\n  setQueueLocalStoradge(queue);\n}\n\nconst adToLibrary = {\n  onAddToWatched,\n  onAddToQueue,\n};\nexport default adToLibrary;\n","import API from './api';\nimport adToLibrary from './add-to-watch&queue';\n\nexport function renderModal({ title, overview, poster_path, id }) {\n  const movieModal = document.querySelector('.movie-modal');\n  // console.log('renderModal ID: ', id);\n\n  const markup = `\n    <div class=\"movie-modal__img-container\">\n     <img src=\"https://image.tmdb.org/t/p/w400${poster_path}\" alt=\"\" class=\"movie-modal__img\"/></div>\n    <div class=\"movie-modal__content\">\n      <h2 class=\"movie-modal__title\">${title}</h2>\n      <div class=\"movie-modal__about\">\n        <h3 class=\"movie-modal__about-header\">ABOUT</h3>   \n        <p class=\"movie-modal__overview\">${overview}</p>\n    </div>\n      <div class=\"btn-wrapper\">\n        <button type=\"button\" class=\"button button--accent add-to-watched-btn\" id=\"addToWatchedBtn\">\n          ADD TO WATCHED\n        </button>\n        <button type=\"button\" class=\"button\" id=\"addToQueueBtn\">ADD TO QUEUE</button>\n      </div>\n    </div>\n    `;\n\n  const movieModalDOM = document.createElement('div');\n  movieModalDOM.classList.add('movie-modal__container');\n  movieModalDOM.innerHTML = markup;\n\n  // console.log(movieModalDOM);\n  movieModal.append(movieModalDOM);\n\n  const modal = document.querySelector('[data-modal]');\n  modal.classList.remove('backdrop--is-hidden');\n\n  const closeModalBtn = document.querySelector('[data-modal-close]');\n  // console.log(closeModalBtn);\n  closeModalBtn.addEventListener('click', () => {\n    movieModalDOM.remove();\n    modal.classList.add('backdrop--is-hidden');\n  });\n\n  const addToWatchedBtn = document.querySelector('.add-to-watched-btn');\n  // console.log('Hej', addToWatchedBtn);\n  addToWatchedBtn.addEventListener('click', () => {\n    // console.log('HEJ!');\n    adToLibrary.onAddToWatched(id);\n    // console.log(`Called adToLibrary.onAddToWatched(${id})`);\n  });\n  const addToQueueBtn = document.querySelector('#addToQueueBtn');\n  addToQueueBtn.addEventListener('click', adToLibrary.onAddToQueue(id));\n}\n","// Funkcja renderMovieCollection(movieCollection) przyjmuje za parametr tablicę\n// z danymi filmów i renderuje ją do div o klasie \"movie-collection\"\n//\n// W kolejnej wersji zostanie dodane:\n// - renderowanie na karcie filmu oceny, która jest widoczna w zakładce MyLibrary,\n//   natomiast na stronie głównej zgodnie z układem na Figmie będzie ukryta,\n// - parsowanie genres do stringa - na razie jest string \"na sztywno\"\n//\n// Aby zaimportować funkcję wpisz:\n//\n// import renderMovieCollection from './renderMovieCollection';\n\nimport API from './api';\nimport { renderModal } from './movie-modal';\n\nconst renderMovieCollection = movieCollection => {\n  const movieCollectionDOM = document.querySelector('.movie-collection');\n\n  const markup = movieCollection\n    .map(\n      ({ id, title, poster_path, release_date }) => `<div class=\"movie-card\" data-id=\"${id}\">\n      <img src=\"https://image.tmdb.org/t/p/w400${poster_path}\" alt=\"\" class=\"movie-card__img\"/>\n      <div class=\"movie-data\">\n        <p class=\"movie-data__title\">${title}</p>\n        <p class=\"movie-data__info\">\n          <span class=\"movie-data__genre\">Drama, Action </span> |\n          <span class=\"movie-data__year\">${new Date(release_date).getFullYear()}</span>\n        </p>\n      </div>\n    </div>\n`,\n    )\n    .join('');\n\n  movieCollectionDOM.innerHTML = markup;\n\n  const movieCardsArr = document.querySelectorAll('.movie-card');\n  movieCardsArr.forEach(movieCard => {\n    movieCard.addEventListener('click', event => {\n      const movieID = event.currentTarget.dataset.id;\n      API.getMovieByID(movieID)\n        .then(data => {\n          console.log(data);\n          renderModal(data);\n        })\n        .catch(error => console.log(error));\n    });\n  });\n};\n\nexport default renderMovieCollection;\n","import API from './api';\nimport renderMovieCollection from './renderMovieCollection';\n\nAPI.getTrending()\n  .then(data => data.results)\n  .then(renderMovieCollection)\n  .catch(error => console.error(error.message));\n","///---to jako import!!!---///\n\nconst API_KEY = '7181a2b710caf29c7153fca4f71ab7d2';\nconst MAIN_URL = 'https://api.themoviedb.org/3';\n\nconst searchInput = document.querySelector('.header-input');\nconst searchForm = document.querySelector('.header-form');\nconst movieList = document.querySelector('.movie-list');\n///----Tu zrobić import---////\nimport renderMovieCollection from './renderMovieCollection.js';\n\nconst searchByKeyword = query => {\n  fetch(`${MAIN_URL}/search/movie?api_key=${API_KEY}&query=${query}`)\n    .then(response => response.json())\n    .then(data => {\n      console.log(data.results);\n      renderMovieCollection(data.results);\n    })\n    .catch(error => console.error(error));\n};\n\nsearchForm.addEventListener('submit', e => {\n  e.preventDefault();\n  const query = searchInput.value;\n  if (query === '') return;\n\n  searchByKeyword(query);\n});\n"],"names":["$b6e5d84fbce03de8$var$loader","document","querySelector","classList","add","window","addEventListener","remove","$ffc195e62a2c7bf2$var$API_KEY","$ffc195e62a2c7bf2$export$2e2bcd8739ae039","async","page","TRENDING_URL","response","fetch","json","error","console","log","message","id","GET_MOVIE_BY_ID_URL","query","GET_MOVIES_QUERY_URL","GENRES_URL","$80b576907cf5d791$export$bf348ba91bbfa858","$80b576907cf5d791$export$18da41cc526d0bf2","$80b576907cf5d791$export$e330b7faa493c08b","JSON","parse","localStorage","getItem","$80b576907cf5d791$export$4f7fa46ff53e516f","$c034acc375419757$export$2e2bcd8739ae039","arr","includes","push","setItem","stringify","$6a92d9ea7981a1dd$export$69bf191433722f78","title","overview","poster_path","movieModal","markup","movieModalDOM","createElement","innerHTML","append","modal","onAddToWatched","onAddToQueue","$043545bfa8825083$export$2e2bcd8739ae039","movieCollection","movieCollectionDOM","map","release_date","Date","getFullYear","join","querySelectorAll","forEach","movieCard","event","movieID","currentTarget","dataset","getMovieByID","then","data","catch","getTrending","results","$9954e574549d774b$var$searchInput","$9954e574549d774b$var$searchForm","e","preventDefault","value","$9954e574549d774b$var$searchByKeyword"],"version":3,"file":"index.cdf6de37.js.map"}